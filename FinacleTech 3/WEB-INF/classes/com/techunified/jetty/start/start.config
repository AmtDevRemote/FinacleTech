# This file controls what file are to be put on classpath or command line.
#
# Format is as follows:
# Each line contains entry for one JAR file.
# Format of line:
#
#  SUBJECT [ [!] CONDITION [AND|OR] ]*
# 
# where SUBJECT: 
#   ends with ".class" is the Main class to run.
#   ends with ".xml" is a configuration file for the command line
#   ends with "/" is a directory from which add all jar and zip files from. 
#   ends with "/*" is a directory from which add all unconsidered jar and zip files from.
#   Containing = are used to assign system properties.
#   all other subjects are treated as files to be added to the classpath.
#
# Subjects may include system properties with $(propertyname) syntax. 
#
# Files starting with "/" are considered absolute, all others are relative to
# the home directory.
#
# CONDITION is one of:
#   always
#   never
#   available classname        # true if class on classpath
#   property name              # true of set
#   java OPERATOR version      # java version compared to literal
#   nargs OPERATOR number      # number of command line args compared to literal
#   OPERATOR := one of "<",">","<=",">=","==","!="
#
# CONTITIONS can be combined with AND OR or !, with AND being the assume
# operator for a list of CONDITIONS.
# Classpath operations are evaluated on the fly, so once a class or jar is
# added to the classpath, subsequent available conditions will see that class.
#

$(jetty.class.path)                              always

org.apache.commons.logging.LogFactory=org.mortbay.log.Factory AND ! property org.apache.commons.logging.LogFactory ! property org.apache.commons.logging.Log

# Try different settings of jetty.home until the jetty.jar is found.
jetty.home=.                                     ! exists $(jetty.home)/lib/jetty.jar 
jetty.home=..                                    ! exists $(jetty.home)/lib/jetty.jar
jetty.home=/home/jetty                           ! exists $(jetty.home)/lib/jetty.jar
jetty.home=/C:/jetty                             ! exists $(jetty.home)/lib/jetty.jar
jetty.home=.                                     ! exists $(jetty.home)/lib/jetty.jar 

# The main class to run
org.mortbay.jetty.Server.class
# override class with old property name
$(start.class).class
# override class with preferred property name
$(main.class).class

# The default configuration files
$(jetty.home)/etc/admin.xml                      nargs == 0
$(jetty.home)/etc/jetty.xml                      nargs == 0

# Set the jetty classpath
$(jetty.home)/lib/jetty.jar          java >= 1.4
$(jetty.home)/lib/servlet.jar              always

# Add JMX jars
$(jetty.home)/lib/jmx.jar            java >= 1.4

# Always use xercesImpl from ext if it is present
$(jetty.home)/lib/xercesImpl.jar                 always

# Add the XML support jars if needed.
$(jetty.home)/lib/xmlParserAPIs-2.5.jar          always
$(jetty.home)/lib/xml-apis.jar                   always

# Set the classpath for the supporting cast
$(jetty.home)/lib/ant.jar                        ! available org.apache.tools.ant.Main
$(jetty.home)/lib/jasper-runtime.jar             ! available org.apache.jasper.Constants
$(jetty.home)/lib/jasper-compiler.jar            ! available org.apache.jasper.JspCompilationContext
$(jetty.home)/lib/jnet.jar                       ! available javax.net.SocketFactory
$(jetty.home)/lib/jsse.jar                       ! available javax.net.ssl.SSLServerSocket
$(jetty.home)/lib/jcert.jar                      ! available javax.security.cert.X509Certificate
# Add anything in ext we have not yet considered.
$(jetty.home)/lib/*                  

# Try some standard locations for anything missing.
#/usr/share/java/ant.jar                          ! available org.apache.tools.ant.Main
$(java.home)/lib/tools.jar                       ! available com.sun.tools.javac.Main
$(java.home)/../lib/tools.jar                    ! available com.sun.tools.javac.Main

# Add a resources directory if it is there
$(jetty.home)/resources/
